package cianom.wfc.core.out;

import java.awt.*;
import java.awt.image.BufferedImage;

public class BufferedImageTarget implements Target<Color> {

    private final int width;
    private final int height;
    private final BufferedImage image;

    public BufferedImageTarget(final int width, final int height) {
        this.width = width;
        this.height = height;
        this.image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    }

    @Override
    public int getWidth() {
        return width;
    }

    @Override
    public int getHeight() {
        return height;
    }

    @Override
    public void observe(final int x, final int y, final Color c) {
        image.setRGB(x, y, c.getRGB());
    }

    @Override
    public BufferedImage toImage() {
        return image;
    }

    //    /**
//     * Returns a new BufferedImage generated by the model.
//     * Requires run() to have been run.
//     */
//    @Override
//    public BufferedImage graphics() {
//        BufferedImage result = new BufferedImage(
//                this.targetWidth,
//                this.targetHeight,
//                BufferedImage.TYPE_INT_RGB
//        );
//
//        if (this.observed != null) {
//            for (int y = 0; y < this.targetHeight; y++) {
//                int dy = y < this.targetHeight - conf.N + 1 ? 0 : conf.N - 1;
//                for (int x = 0; x < this.targetWidth; x++) {
//                    int dx = x < this.targetWidth - conf.N + 1 ? 0 : conf.N - 1;
//                    Object c =
//                            this.sample.getDistinctValues().get(
//                                    this.patterns[this.observed[x - dx + (y - dy) * this.targetWidth]][dx +
//                                            dy *
//                                                    conf.N]
//                            );
//
//                    result.setRGB(x, y, c.getRGB());
//                }
//            }
//        }
//        else {
//            for (int i = 0; i < this.wave.length; i++) {
//                int contributors = 0, r = 0, g = 0, b = 0;
//                final int x = i % this.targetWidth;
//                final int y = i / this.targetWidth;
//
//                for (int dy = 0; dy < conf.N; dy++) {
//                    for (int dx = 0; dx < conf.N; dx++) {
//                        int sx = x - dx;
//                        if (sx < 0) sx += this.targetWidth;
//
//                        int sy = y - dy;
//                        if (sy < 0) sy += this.targetHeight;
//
//                        int s = sx + sy * this.targetWidth;
//                        if (this.onBoundary(sx, sy)) continue;
//                        for (int t = 0; t < this.T; t++)
//                            if (wave[s][t]) {
//                                contributors++;
//                                T value = this.sample.getDistinctValues().get(this.patterns[t][dx + dy * conf.N]);
//                                r += color.getRed();
//                                g += color.getGreen();
//                                b += color.getBlue();
//                            }
//                    }
//                }
//
//                Color c = new Color(
//                        r / contributors,
//                        g / contributors,
//                        b / contributors
//                );
//                result.setRGB(x, y, c.getRGB());
//            }
//        }
//
//        return result;
//    }

}
